// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  FM
}

enum DeskStatus {
  AVAILABLE
  UNAVAILABLE
}

enum BookingStatus {
  BOOKED
  PENDING
  CONFIRMED
  CANCELLED
  CHECKED_IN
  CHECKED_OUT
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  firstName     String?
  lastName      String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  role          UserRole  @default(USER)
  image         String?
  accounts      Account[]
  floor         Floor[]
  booking       Booking[]
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Floor {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  floorName    String?
  imageUrl     String?
  floorManager String  @db.ObjectId

  user User @relation(fields: [floorManager], references: [id], onDelete: Cascade)
}

model Desk {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  deskName    String?
  description String?
  coords      Int[]
  status      DeskStatus @default(AVAILABLE)
  amentyIDs   String[]   @db.ObjectId
  amenities   Amenity[]  @relation(fields: [amentyIDs], references: [id])
  booking     Booking[]
}

model Amenity {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  amenityName String
  deskIDs     String[] @db.ObjectId
  desks       Desk[]   @relation(fields: [deskIDs], references: [id])
}

model Booking {
  id         String        @id @default(auto()) @map("_id") @db.ObjectId
  deskId     String        @db.ObjectId
  userId     String        @db.ObjectId
  date       DateTime
  created_at DateTime      @default(now())
  updated_at DateTime?
  status     BookingStatus @default(BOOKED)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  desk Desk @relation(fields: [deskId], references: [id], onDelete: Cascade)
}
